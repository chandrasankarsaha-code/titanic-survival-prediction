# -*- coding: utf-8 -*-
"""Titanic_Survival.prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mz6Jy2CcCWY6IfiU8-uJss1V9MQPyvMt

# **Libraries**
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.svm import SVC

"""# **Data Load**"""

df=pd.read_csv('/content/tested.csv')

df.head()

df.info()

df.describe()

"""# **Data Preprocessing**"""

df.isnull().sum()

df=df.dropna(subset=['Age','Cabin'])

df.isnull().sum()

df=df.drop('PassengerId',axis=1)

df.head()

label_encoder=LabelEncoder()

df['Name']=label_encoder.fit_transform(df['Name'])
df['Sex']=label_encoder.fit_transform(df['Sex'])
df['Ticket']=label_encoder.fit_transform(df['Ticket'])
df['Cabin']=label_encoder.fit_transform(df['Cabin'])
df['Embarked']=label_encoder.fit_transform(df['Embarked'])

"""# **EDA**"""

df.corr()

survived_corr=df.corr()['Survived']

survived_corr

plt.figure(figsize=(12,8))
sns.countplot(x='Sex',data=df)
plt.show()

plt.figure(figsize=(12,8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.show()

X = df.drop(['Survived'], axis=1)
y = df['Survived']

"""# **Data Split**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# **Decision Tree**"""

dt_model=DecisionTreeClassifier(random_state=42)
dt_model.fit(X_train, y_train)
dt_pred=dt_model.predict(X_test)

dt_model

dt_pred

dt_accuracy = accuracy_score(y_test, dt_pred)
dt_classification_report = classification_report(y_test, dt_pred)
dt_conf_matrix = confusion_matrix(y_test, dt_pred)

dt_classification_report

dt_accuracy

"""# **Suppport Vector Machine**"""

svc_model=SVC(random_state=42)
svc_model.fit(X_train,y_train)
svc_pred=svc_model.predict(X_test)

svc_model

svc_pred

svc_accuracy=accuracy_score(y_test,svc_pred)
svc_classification_model=classification_report(y_test,svc_pred)
svc_conf_matrix=confusion_matrix(y_test,svc_pred)

svc_classification_model

svc_accuracy

"""# **Accuracy Comparison Dataframe**"""

accuracy_data = {
    'Model': ['Decision Tree', 'Support Vector Machine'],
    'Accuracy': [dt_accuracy, svc_accuracy],
    'Classification Report': [dt_classification_report, svc_classification_model],
}

df = pd.DataFrame(accuracy_data)

df

